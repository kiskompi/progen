# Filetype for storing folder structures for progen

Kiterjesztés: .str
Struktúra:
Könnyen átalakítható legyen
name1/name2/name3
name1/name4
name1/name2/name5/name6
stb.formátumra, hogy a program földolgozza
legyen átlátható kézzel szerkesztéshez

name - mappanév
# - szeparátor
333 - chmod jogosultságok
name1#333
|--name2#456
|--|--name3#765
|--|--name5
|-----|--name6
|--name4
name7


stringified:

[name1[name2[name3],name5[name6],name4]name7]

ha nem - és nem | :
  berak: [
  berak: beolvasott (név#szám)
  sor végén berak: ]

  VEREMMEL:

1
21
321
521
6521
41
7




/*
        int kul = prev_depth - depth;
        if (kul > 0)
        {
            // if current is more near to root than previous
            for (int k = 0; k < kul; ++k)
                stringified.append("]");
            stringified.append("," + name);
        }
        else if (kul == 0)
        {
            // if current is a sibling
            stringified.append("," + name);
        }
        else if (kul == -1)
        {
            // if current is a child of the previous
            stringified.append("[" + name);
        }
        else
            throw("Invalid folder structure");

        prev_depth = depth;*/

v

void FTree::create_dirs(Folder f)
{
    current = std::make_shared<Folder>(f);
    // FIXME childs is always empty! perhaps because folder with test path is a strane phenomenon
    std::cout<<"Create - Current: "<<current->path<<std::endl;
    if (current->childs.empty()) return;
    
    std::cout<<"child not empty "<<current->childs.size()<<"\n";
    for(int i = 0; i<current->childs.size(); ++i) {
        // TODO generic function should be passed
        current = std::make_shared<Folder>(current->childs.at(i));
        std::string full_path = root.path+SEPTOR+current->path;
        std::cout<<full_path<<"created\n";
        boost::filesystem::create_directory(boost::filesystem::path(full_path));
        this->create_dirs(current);
    }
} 

void FTree::create_dirs(std::shared_ptr<Folder> f)
{
    // FIXME childs is always empty! perhaps because folder with test path is a strane phenomenon
    std::cout<<"Create - Current: "<<current->path<<std::endl;
    if (current->childs.empty()) return;

    std::cout<<"child not empty "<<current->childs.size()<<"\n";
    for(int i = 0; i<current->childs.size(); ++i) {
        // TODO generic function should be passed
        current = std::make_shared<Folder>(current->childs.at(i));
        std::string full_path = root.path+SEPTOR+current->path;
        std::cout<<full_path<<"created\n";
        boost::filesystem::create_directory(boost::filesystem::path(full_path));
        this->create_dirs(current);
    }
} 
    /// This function iterates through a subtree of the tree.
    ///  \param Folder folder The starting node of the depth-first exploration. The function will explore its subtrees
    void create_dirs(std::shared_ptr<Folder> folder);
    void create_dirs(Folder);
